---
title: "Let's Build a Chatbot"
subtitle: "Using Shiny, OpenAI, and RStudio to Build a Chatbot"
title-slide-attributes:
  data-background-image: "media/Famous Landmarks Collage.jpeg"
  data-background-size: contain
  data-background-opacity: "0.8"
author: "James Wade"
footer: "Let's Build a Chatbot | James Wade | TunisR Users & R-Ladies Rome"
logo: "media/r-tunis.png"
format: 
  revealjs:
    theme: [default, custom.css]
    embed-resources: true
    margin: 0.05
execute:
  freeze: true
---

## API Calls {.center background-image="media/chatbot-fun2.jpeg" background-position="right" background-size="contain" background-repeat="no-repeat"}


## An Example from OpenAI Docs

<br>

```bash
curl https://api.openai.com/v1/chat/completions \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $OPENAI_API_KEY" \
-d '{
"model": "gpt-3.5-turbo",
"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
}'
```

## Constructing Messages for OpenAI

<br>

The message body:

```{.json}
{
  "model": "gpt-3.5-turbo",
  "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello!"}
  ]
}
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)

# construct the message body
user_message <- list(list(role = "user", content = "Hello"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)
```


## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)

# construct the message body
user_message <- list(list(role = "user", content = "Hello!"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)

# send the request
resp <-
  request("https://api.openai.com/v1") |> 
  req_url_path_append("chat/completions") |> 
  req_auth_bearer_token(token = Sys.getenv("OPENAI_API_KEY")) |> 
  req_body_json(body) |> 
  req_perform()
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)

# construct the message body
user_message <- list(list(role = "user", content = "Hello!"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)

# send the request
resp <-
  request("https://api.openai.com/v1") |>
  req_url_path_append("chat/completions") |> 
  req_auth_bearer_token(token = Sys.getenv("OPENAI_API_KEY")) |> 
  req_body_json(body) |> 
  req_perform()

# process the response
resp |>
  resp_body_json(simplifyVector = TRUE) |> 
  pluck("choices", "message", "content")
```

## Examining the Response

```{r}
#| echo: true
resp |> 
  resp_body_json(simplifyVector = TRUE)
```


## Wrapping it in a function

```{r}
#| echo: true
#| code-line-numbers: "4-7|8-13|15-17"
library(httr2)
library(purrr)

chat <- function(message, api_key = Sys.getenv("OPENAI_API_KEY")) {
  user_message <- list(list(role = "user", content = message))
  body <- list(model = "gpt-3.5-turbo",
               messages = user_message)
  resp <-
    request("https://api.openai.com/v1") |> 
    req_url_path_append("chat/completions") |> 
    req_auth_bearer_token(token = api_key) |> 
    req_body_json(body) |> 
    req_perform()
  
  resp |> 
    resp_body_json(simplifyVector = TRUE) |> 
    pluck("choices", "message", "content")
}
```

## Let's Try it Out {.center background-image="media/chatbot-fun.jpeg" background-position="right" background-size="contain" background-repeat="no-repeat"}

## Trying out `chat()`

<br>

```{r}
#| echo: true
chat("What is your favorite color?")
```

<br>

. . . 

```{r}
#| echo: true
chat("Show me a simple ggplot2 example. Only code with comments. Be brief.")
```

## A Prettier Response

```{r}
#| echo: true
answer <- chat("Make a ggplot2 in an RMarkdown document and briefly tell me
               what you made.")
answer |> cat()
```

## An Even Prettier Response

```{r}
answer |> shiny::markdown()
```


## Helper Functions {.center background-image="media/chatbot-fun3.png" background-position="right" background-size="contain" background-repeat="no-repeat"}

## `chat()`

```{.r code-line-numbers="|2|3|4|5|6"}
chat <- function(user_message, 
                 history = NULL,
                 system_prompt = c("general", "code"),
                 api_key = Sys.getenv("OPENAI_API_KEY")) {
  system   <- get_system_prompt(system_prompt)
  prompt   <- prepare_prompt(user_message, system_prompt, history)
  base_url <- "https://api.openai.com/v1"
  body     <- list(model = "gpt-3.5-turbo",
                   messages = prompt)
  
  # <httr2_request_pipeline>
  # <process_response>
}
```

## Helper Functions 

### `get_system_prompt()`

```{.r}
get_system_prompt <- function(system = c("general", "code")) {
  instructions <- 
    switch(system,
           "general" = "You are a helpful assistant.",
           "code"    = "<code_assistant_prompt>")
  list(list(role = "system", content = instructions))
}
```

<br>

### `prepare_prompt()`

```{.r}
prepare_prompt <- function(user_message, system_prompt, history) {
  user_prompt <-  list(list(role = "user", content = user_message))
  c(system_prompt, history, user_prompt) |> compact()
}
```

## Shiny Build {background-image="media/laptop-mosaic.png" background-position="right" background-size="contain" background-repeat="no-repeat"}

```{r}
countdown::countdown(30, left = 0)
```

## Deployment {background-image="media/launch.png" background-position="right" background-size="contain" background-repeat="no-repeat"}

<br>

::: {.incremental}
- [shinyapps.io ðŸ”—](http://www.shinyapps.io/)
- [HuggingFace ðŸ”—](https://huggingface.co/docs/hub/en/spaces-sdks-docker-shiny)
- [Posit Connect ðŸ”—](https://posit.co/products/enterprise/connect/)
:::

## {.center background-image="media/tunisian-coast.png" background-size="contain" background-repeat="no-repeat"}
