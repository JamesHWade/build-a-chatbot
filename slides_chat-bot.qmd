---
title: "Let's Build a Chatbot"
subtitle: "Using GitHub Copilot, ChatGPT, & more in your favorite IDE"
title-slide-attributes:
  data-background-image: "media/title-slide-img.png"
  data-background-size: contain
  data-background-opacity: "0.4"
author: "James Wade"
footer: "Let's Build a Chatbot | James Wade | R Tunis & R Ladies Rome"
logo: "media/r-tunis.png"
format: 
  revealjs:
    theme: [default, custom.css]
    embed-resources: true
execute:
  freeze: true
---

## Creating OpenAI API Calls {.center background-image="media/r-tunis.png" background-opacity="0.8"}


## An Example from OpenAI Documentation

```bash
curl https://api.openai.com/v1/chat/completions \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $OPENAI_API_KEY" \
-d '{
"model": "gpt-3.5-turbo",
"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
}'
```

## Constructing Messages for OpenAI

The message body:

```{json}
#| echo: true
{
  "model": "gpt-3.5-turbo",
  "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello!"}
  ]
}
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)

# construct the message body
user_message <- list(list(role = "user", content = "Hello"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)
api_key <- Sys.getenv("OPENAI_API_KEY")
```


## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
library(httr2)
library(purrr)

# construct the message body
user_message <- list(list(role = "user", content = "Hello!"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)
api_key <- Sys.getenv("OPENAI_API_KEY")

# send the request
resp <-
  request("https://api.openai.com/v1") |> 
  req_url_path_append("chat/completions") |> 
  req_auth_bearer_token(token = api_key) |> 
  req_body_json(body) |> 
  req_perform()
```

## Send requests with `{httr2}` {auto-animate="true"}

```{r}
#| echo: true
# construct the message body
user_message <- list(list(role = "user", content = "Hello!"))
body <- list(model = "gpt-3.5-turbo", messages = user_message)
api_key <- Sys.getenv("OPENAI_API_KEY")

# send the request
resp <-
  request("https://api.openai.com/v1") |>
  req_url_path_append("chat/completions") |> 
  req_auth_bearer_token(token = api_key) |> 
  req_body_json(body) |> 
  req_perform()

# process the repsonse
resp |>
  resp_body_json(simplifyVector = TRUE) |> 
  pluck("choices", "message", "content")
```

## Examining the Response

```{r}
#| echo: true
resp |> 
  resp_body_json(simplifyVector = TRUE)
```


## Wrapping it in a function

```{r}
#| echo: true
#| code-line-numbers: "4-6|8-12|15-17"
library(httr2)
library(purrr)

chat <- function(message, api_key = Sys.getenv("OPENAI_API_KEY")) {
  user_message <- list(list(role = "user", content = message))
  body <- list(model = "gpt-3.5-turbo",
               messages = user_message)
  resp <-
    request("https://api.openai.com/v1") |> 
    req_url_path_append("chat/completions") |> 
    req_auth_bearer_token(token = api_key) |> 
    req_body_json(body) |> 
    req_perform()
  
  resp |> 
    resp_body_json(simplifyVector = TRUE) |> 
    pluck("choices", "message", "content")
}
```

## Trying out `chat()`

```{r}
#| echo: true
chat("What is your favorite color?")
```

--

```{r}
#| echo: true
chat("Show me a simple ggplot2 example. Only code with comments. Be brief.")
```

## A Prettier Reponse

```{r}
#| echo: true
answer <- chat("Make a ggplot2 in an RMarkdown document and briefly tell me
               what you made.")
answer |> cat()
```

## An Even Prettier Response

```{r}
#| echo: true
answer |> shiny::markdown()
```

## Some Helper Functions {.center}

![](title-slide-img.png){.absolute top="-10%" right="-10%" height="500%" style="max-height: unset;"}

## `chat()`

```{.r code-line-numbers="2|3|4|5|6"}
chat <- function(user_message, 
                 history = NULL,
                 system_prompt = c("general", "code"),
                 api_key = Sys.getenv("OPENAI_API_KEY")) {
  system   <- get_system_prompt(system_prompt)
  prompt   <- prepare_prompt(user_message, system_prompt, history)
  base_url <- "https://api.openai.com/v1"
  body     <- list(model = "gpt-3.5-turbo",
                   messages = prompt)
  
  # <httr2_request_pipeline>
  # <process_response>
}
```

## Helper Functions 

### `get_system_prompt()`

```{.r}
get_system_prompt <- function(system = c("general", "code")) {
  instructions <- 
    switch(system,
           "general" = "You are a helpful assistant.",
           "code"    = "<code_assistant_prompt>")
  list(list(role = "system", content = instructions))
}
```

<br>

### `prepare_prompt()`

```{.r}
prepare_prompt <- function(user_message, system_prompt, history) {
  user_prompt <-  list(list(role = "user", content = user_message))
  c(system_prompt, history, user_prompt) |> compact()
}
```
